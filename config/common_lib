


#############################################################################################################
# function list
# new function write at end
# 1 writeLog
#############################################################################################################

#  Output success test case log information
#  IN : 
#       $1:    The title of testcase
#       $2:    The result of current testcase
#           pass:  the test is ok
#           fail:  the test is fail
#  OUT: N/A
function lava_report()
{
    echo "The result of test "$1" is "$2
    #This cmd used to report pass result to lava server0
    lava-test-case "$1" --result $2
    return 0
}



#  Output success test case log information
#  IN : N/A
#  OUT: N/A
function writePass()
{
    local Test_Result="PASS"
    echo "$Module_Name,""$JIRA_ID,""$Designed_Requirement_ID,""$Test_Case_ID,""$Test_Item,""$Test_Case_Title,""$Test_Result" >> ${CONFIG_LIB_TMP}/../pcie_autotest/${REPORT_FILE}
    #This cmd used to report pass result to lava server0
    #lava-test-case ${Module_Name}":"${Test_Case_Title} --result pass
    return 0
}

#  Output fail test case log information
#  IN : $1 Error log information
#  OUT: N/A
function writeFail()
{
    local Test_Result="FAIL"
    local Remark="$1"
    echo "$Module_Name,""$JIRA_ID,""$Designed_Requirement_ID,""$Test_Case_ID,""$Test_Item,""$Test_Case_Title,""$Test_Result,""$Remark" >> ${CONFIG_LIB_TMP}/../pcie_autotest/${REPORT_FILE}
    #This cmd used to report fail result to lava server
    #lava-test-case ${Module_Name}":"${Test_Case_Title} --result fail
    return 0
}

# Output log file header
# IN : N/A
# OUT: N/A
function writeLogHeader
{
    echo "Module Name,JIRA ID,Designed Requirement ID,Test Case ID,Test Item,Test Case Title,Test Result,Remark" > ${REPORT_FILE}
    return 0
}

# Set trust relationship for two boards
# IN : N/A
# OUT: N/A
function setTrustRelation
{
    rm -f ~/.ssh/*
    expect -c '
        set timeout -1
        set back_ip '${BACK_IP}'
        spawn ssh-keygen -t rsa
        expect {
        "*save the key*id_rsa*" { send "\r"; exp_continue }
        "*verwrite*y/n*" { send "y\r"; exp_continue }
        "*passphrase*passphrase*" { send "\r"; exp_continue }
        "*same passphrase*" { send "\r" }
        }

        spawn scp -r /root/.ssh/id_rsa.pub root@${back_ip}:/root/.ssh/authorized_keys
        expect "Are you sure you want to continue connecting (yes/no)?"
        send "yes\r"
        sleep 10
        expect -re ".*password:"
        send "root\r"

        expect eof
        exit 0
    '

    return 0
}

####
#add by luojiaxing
####
# Set trust relationship for two boards
# IN : 
#     $1 : Ip of target server
      $2 : username to login  target server
      $3 : password used for username before
# OUT: N/A
function setTrustRelationUsePara
{
    rm -f ~/.ssh/*
    
    tmpIP=$1
    tmpUsername=$2
    tmpPassword=$3 
 
    expect -c '
        set timeout -1
        set back_ip '${tmpIP}'
        set user_name '${tmpUsername}'
       # set pass_word '${tmpPassword}'
        spawn ssh-keygen -t rsa
        expect {
        "*save the key*id_rsa*" { send "\r"; exp_continue }
        "*verwrite*y/n*" { send "y\r"; exp_continue }
        "*passphrase*passphrase*" { send "\r"; exp_continue }
        "*same passphrase*" { send "\r" }
        }

        spawn scp -r /root/.ssh/id_rsa.pub $user_name@$back_ip:/root/.ssh/authorized_keys
        expect "Are you sure you want to continue connecting (yes/no)?"
        send "yes\r"
        sleep 10
        expect -re ".*password:"
        send "Huawei12\#\$\r"

        expect eof
        exit 0
    '

    return 0
}



## Get Local IP
# IN : N/A
# OUT: N/A
function initLocalIP()
{
    echo "Begin to get local ip"
    COMMON_LOCAL_IP=`ifconfig eth0 | grep 'inet addr:' | awk '{print $2}' | awk -F':' '{print $2}'`
    echo "The local ip of eth0 is "${COMMON_LOCAL_IP}
}

# Get client server ip
# IN :
      $1 : MAC address of DHCP server 
      $2 : MAC address of client server
	  $3 : username of DHCP server
	  $4 : password of DHCP server
# OUT: N/A
function getIPofClientServer
{
    tmpDHCPMacAddr=${1}
    tmpClientMacAddr=${2}
    tmpUserName=${3}
	tmpPassWord=${4}
 
    echo ${tmpDHCPMacAddr} ${tmpClientMacAddr} ${tmpUserName} ${tmpPassWord}
	
	#First we need to get the ip of DHCP server 
	tmpDHCPIp=`arp | grep ${tmpDHCPMacAddr} | awk '{print $1}'`
	echo "Get DHCP server IP :"${tmpDHCPIp} 
	
    #then,we get client ip from DHCP server using ssh service
    expect -c '
        set timeout -1
        set back_ip '${tmpDHCPIp}'
        set user_name '${tmpUserName}'
        set pass_word '${tmpPassWord}'
		
        #show client ip info in arp list in DHCP server using ssh service 
        spawn ssh $user_name@$back_ip  "arp | grep '${tmpClientMacAddr}'"
		
        sleep 10
        set timeout 120
        expect "Are you sure you want to continue connecting (yes/no)?"
        send "yes\r"
        expect -re ".*password:"
        #set timeout 120
        send "$pass_word\r"
        expect eof
        exit 0
    ' | tee res.log

        tmpTargetIpList=`cat res.log | grep 'ether' | awk '{print $1}'`
        
        if [ x"$tmpTargetIpList" = x"" ]
        then
            expect -c '
        	set timeout -1
        	set back_ip '${tmpDHCPIp}'
        	set user_name '${tmpUserName}'
       	 	set pass_word '${tmpPassWord}'
		
        	#show client ip info in arp list in DHCP server using ssh service 
        	spawn ssh $user_name@$back_ip  "arp | grep '${tmpClientMacAddr}'"
		
        	sleep 10
        	expect "Are you sure you want to continue connecting (yes/no)?"
        	set timeout 60
        	send "yes\r"
        	expect -re ".*password:"
        	set timeout 60
        	send "$pass_word\r"
        	expect eof
        	exit 0
    		' | tee res.log

        	tmpTargetIpList=`cat res.log | grep 'ether' | awk '{print $1}'`
        fi

        #finish we need to get the using ip form ip list get before using ping
        for ip in $tmpTargetIpList
        do
		ping ${ip} -c 6 > /dev/null
		if [ $? != 0 ]
		then
			echo "The using client ip is not "$ip
		else
			echo "The using client ip is "$ip" Get IP success!"
			COMMON_CLIENT_IP=$ip
			break
		fi
        done

        echo "the return value is "${COMMON_CLIENT_IP}
        rm res.log
}

## Modify Boot Order to self disk reboot
# IN : N/A
# OUT: N/A
function modifyBootOrder()
{

  #***First, we should change the boot order to make TEST_REBOOT lie on first order***

  #get the first order id of boot order list
  First_ID=`efibootmgr -v | grep "BootOrder" | awk '{print $2}' | awk -F',' '{print $1}'`

  #get the id of TEST_REBOOT
  tmp=`efibootmgr -v | grep "Self_Disk_Reboot" | awk '{print $1}'`
  tmp=${tmp:4:4}
  echo $tmp

  #insert the order of TEST_REBOOT into first order
  efibootmgr -o $tmp,$First_ID

 # efibootmgr
  
}

function recoverBootOrder()
{
 #***First, we should change the boot order to make TEST_REBOOT lie on first order***

  #get the first order id of boot order list
  First_ID=`efibootmgr -v | grep "BootOrder" | awk '{print $2}' | awk -F',' '{print $1}'`

  #get the id of TEST_REBOOT
  tmp=`efibootmgr -v | grep "EFI Network 2" | awk '{print $1}'`
  tmp=${tmp:4:4}
  echo $tmp

  #insert the order of TEST_REBOOT into first order
  efibootmgr -o $tmp,$First_ID

  #efibootmgr

}

function remoteLogin()
{
   #First,reboot
   #ssh root@192.168.3.197 "reboot"
   expect -c '
        	set timeout -1
        	spawn ssh root@192.168.3.197  "reboot"
		
        	sleep 120
        	expect "login:"
        	set timeout 120
        	send "root\r"
        	expect -re "Password"
        	set timeout 60
        	send "root\r"
        	expect eof
        	exit 0
    		' 
   ssh root@192.168.3.197 "pwd"
   echo "Success login in the system"
}

####
#End of luojiaxing edit
####



####################################################################################
#add by hezhongyan
##################
#Alone Functions
#g_sHeadCurLine=$(printf "%s[%3d]%s[%3d]" "${FUNCNAME[1]}" "${BASH_LINENO[0]}" "${FUNCNAME[0]}" ${LINENO})
#OutLogHead 1 "" "${g_sHeadCurLine}" "${g_sMsgCur}" "${flLog}" false
OutLogHead()
{
    local nStatus=${1}
    local sStatus=${2}
    local sHead1=${3}
    local sMsg1=${4}
    local flLog=${5:-/dev/null}
    local bExitErr=${6:-false}
    local bNewLine=${7:-true}

    local m_cn1=
    if [ "${bNewLine}" == "true" ]; then
        m_cn1=$'\n'
    fi

    case "${nStatus}" in
    0)
        sStatus=${sStatus:-Info}
        ;;
    *)
        sStatus=${sStatus:-Error}
        ;;
    esac

    local sLogA=
    if [ -n "${sHead1}" ]; then
        sLogA=$(printf "%s%5s[%3d]: %s" "${sHead1}" "${sStatus}" "${nStatus}" "${sMsg1}")
    elif [ -n "${sMsg1}" ]; then
        sLogA=${sMsg1}
    fi

    case "${nStatus}" in
    0)
        printf "%s${m_cn1}" "${sLogA}"
        printf "%s${m_cn1}" "${sLogA}" >> "${flLog}"
        ;;
    *)
        printf "%s${m_cn1}" "${sLogA}" 1>&2
        printf "%s${m_cn1}" "${sLogA}" >> "${flLog}"

        if [ "${bExitErr}" == "true" ]; then
            exit ${nStatus}
        fi
        ;;
    esac
}
export -f OutLogHead

##########
#Complex Functions
LoadSourceFileParent()
{
    local drCur1=${1}
    local flFind1=${2}
    local varPaths=${3}
    local flLog=${4}
    local bExitErr=${5:-true}

    if [ -z "${drCur1}" -o -z "${flFind1}" ]; then
        g_sMsgCur="directory or file name is empty"
        eval ${varPaths}=
        return
    fi

    local flPub1 s1 s2 s3
    flPub1=${drCur1}/${flFind1}
    if [ ! -f "${flPub1}" ]; then
        s1=$(find ${drCur1}/.. ${g_argFindMaxDepth} -type f -name "${flFind1}")
        if [ -z "${s1}" ]; then
            g_sMsgCur="Not found ${flFind1}"
            g_sHeadCurLine=$(printf "%s[%3d]%s[%3d]" "${FUNCNAME[1]}" "${BASH_LINENO[0]}" "${FUNCNAME[0]}" ${LINENO})
            OutLogHead 1 "" "${g_sHeadCurLine}" "${g_sMsgCur}" "${flLog}" "${bExitErr}"
        fi
        flPub1=${s1}
    fi
    eval ${varPaths}=\${flPub1}
}
export -f LoadSourceFileParent

#说明:RunTable 1-Excel文本表 2-要生成的中间结果表 3-脚本所在目录 4-程序打印的日志信息
#示例:RunTable "data/testcases.table" ~/tmp/status.txt pcie_autotest/case_script ~/tmp/pcie.log
RunTable()
{
    local flTableOrigin=${1}
    local flTableStatus=${2}
    local drScript=${3}
    local flLog=${4:-/dev/null}

    echo "The base table used is "${1}

    local sPass
    sPass=$(echo "${g_statusPass}" |sed 's#\([]/*[]\)#\\\1#g')

    local sStatusTable
    sStatusTable=
    if [ -f "${flTableStatus}" ]; then
        if [ "${g_bTCsReset}" == "true" ]; then
            rm -f "${flTableStatus}"
        else
            sStatusTable=$(cat "${flTableStatus}")
        fi
    fi

    local sR0 sR1 sLevelR1 sLevelR2 sTTitle1 sTTitle2 sScript1 sScript2 sFuncNa
    local sStatus1 nRt1 bRun1 sLineStatus

    local nMaxRow nR1 nRows1 bUpdate
    nMaxRow=$(sed -n '$=' "${flTableOrigin}")
    nR1=0
    while [ ${nR1} -lt ${nMaxRow} ]; do
        let nR1+=1
        sR0=$(sed -n "${nR1}p" "${flTableOrigin}")
        sR1=$(echo "${sR0}" |sed "s/^[ \t]\+//;s/[ \t\r]\+\$//")
        if [ -z "${sR1}" ]; then
            continue
        fi

        sLevelR1=$(awk -F'\t' '{print $8}' <<< "${sR1}" |sed "s/^[ \t]\+//;s/[ \t]+\$//")
        sLevelR2=$(sed 's#\([]/*[]\)#\\\1#g' <<< "${sLevelR1}")
        sTTitle1=$(awk -F'\t' '{print $5}' <<< "${sR1}" |sed "s/^[ \t]\+//;s/[ \t]+\$//")
        sTTitle2=$(sed 's#\([]/*[]\)#\\\1#g' <<< "${sTTitle1}")
        sScript1=$(awk -F'\t' '{print $6}' <<< "${sR1}" |sed "s/^[ \t]\+//;s/[ \t]+\$//")
        sFuncNa=$(awk -F'\t' '{print $7}' <<< "${sR1}" |sed "s/^[ \t]\+//;s/[ \t]+\$//")
        
	#get the description of testcase
	sTESTCASE=$(awk -F'\t' '{print $4}' <<< "${sR1}" |sed "s/^[ \t]\+//;s/[ \t]+\$//")
        echo "TestInfo: "${sTTitle1}" "${sScript1}" "${sFuncNa}

        OutLogHead 0 "" "" "" "${flLog}" false
        OutLogHead 0 "" "" "title: ${sTTitle1}" "${flLog}" false

        g_sMsgCur=
        grep -q "^${sLevelR2}\$" <<< "${g_sLevelRun}"
        if [ $? -ne 0 ]; then
            g_sMsgCur="test case close"
            sStatus1=${g_statusClose}
        else
            nRt1=${g_nNone}
            bRun1=true
            echo "Check the script "${sScript1}" "${sScript2}"..."
            if [ -n "${sScript1}" ]; then
                LoadSourceFileParent "${drScript}" "${sScript1}" sScript2 "${flLog}" false
                if [ -n "${sScript2}" ]; then
                    #脚本中如果有exit,会引起当前进程退出;
                    eval ". ${sScript2}"
                    if [ $? -ne 0 ]; then
			echo "Environment is not OK when running "${sScript1}" "${sScript2}
                        nRt1=${g_nBlock}
                        g_sMsgCur="environment not OK"
                    fi
                else
		    echo "No found the script: "${sScript1}
                    bRun1=false
                    g_sMsgCur="${sScript1} not exist"
                fi
            fi

            if ${bRun1}; then
                if [ -n "${sFuncNa}" ]; then
                    OutLogHead 0 "" "" "function: ${sFuncNa}" "${flLog}" false

                    eval "${sFuncNa}"
                    nRt1=$?
                else
                    g_sMsgCur="function is empty"
                fi
            fi

            case ${nRt1} in
            ${g_nPass})
                sStatus1=${g_statusPass}
                ;;
            ${g_nFail})
                sStatus1=${g_statusFail}
                ;;
            ${g_nBlock})
                sStatus1=${g_statusBlock}
                ;;
            ${g_nNone})
                sStatus1=${g_statusNone}
                ;;
            127)
                g_sMsgCur="${sFuncNa} not exist"
                sStatus1=${g_statusNone}
                ;;
            *)
                sStatus1=${g_statusUndef}
                ;;
            esac
        fi
        echo "The stat of "${sTTitle1}" is "${sStatus1}

        if [ x"${sStatus1}" = x"[Close]" ];then
            echo "The test have benn skip!"
        else
            if [ x"${sStatus1}" = x"[Pass]" ];then
               lava_report "${sTTitle1}" pass
            else
               lava_report "${sTTitle1}" fail
            fi
        fi

        OutLogHead 0 "" "" "status: ${sStatus1}" "${flLog}" false
        if [ -z "${sTTitle1}" ]; then
            g_sMsgCur="no title ${sR1}"
            sLineStatus=
        else
            sLineStatus=$(grep "${sTTitle2}" <<< "${sStatusTable}")
        fi
        bUpdate=false;
        if [ -n "${sLineStatus}" ]; then
            if [ "${g_bTCsReset}" != "true" ]; then
                nRows1=$(grep "${sTTitle2}" "${flTableOrigin}" |wc -l)
                if [ ${nRows1} -eq 1 ]; then
                    bUpdate=true;
                else
                    g_sMsgCur="[${nRows1}]rows have the same title[${sTTitle1}]"
                    g_sHeadCurLine=$(printf "%s[%3d]%s[%3d]" "${FUNCNAME[1]}" "${BASH_LINENO[0]}" "${FUNCNAME[0]}" ${LINENO})
                    OutLogHead 1 "Warn" "${g_sHeadCurLine}" "${g_sMsgCur}" "${flLog}" false
                fi
            fi
        fi

        if ${bUpdate}; then
            #更新状态表中这条用例的状态;
            grep -q "^${sPass}${g_sSplit}" <<< "${sLineStatus}"
            if [ $? -ne 0 ]; then
                sStatusTable=$(sed "/${sTTitle2}/d" <<< "${sStatusTable}")
                sStatusTable=${sStatusTable}$'\n'${sStatus1}${g_sSplit}${sTTitle1}${g_sSplit}${g_sMsgCur}
            fi
        else
            sStatusTable=${sStatusTable}$'\n'${sStatus1}${g_sSplit}${sTTitle1}${g_sSplit}${g_sMsgCur}
        fi
    done

    echo "${sStatusTable}" > "${flTableStatus}"

    echo "The pcie RunTable phase is over!"
}
export -f RunTable

#说明:GenReport 1-Excel文本表 2-要生成的中间结果表 3-模块名 4-程序打印的日志信息
#示例:GenReport "data/testcases.table" ~/tmp/status.txt PCIe ~/tmp/pcie.log
GenReport()
{
    local flTableOrigin=${1}
    local flTableStatus=${2}
    local sModule=${3}
    local flLog=${4:-/dev/null}

    local sPass sFail sStatus1 sSearch1 sSearch2 sMessage 
    sPass=$(echo "${g_statusPass}" |sed 's#\([]/*[]\)#\\\1#g')
    sFail=$(echo "${g_statusFail}" |sed 's#\([]/*[]\)#\\\1#g')

    if [ ! -f "${flTableStatus}" ]; then
        g_sMsgCur="${flTableStatus} not exist"
        g_sHeadCurLine=$(printf "%s[%3d]%s[%3d]" "${FUNCNAME[1]}" "${BASH_LINENO[0]}" "${FUNCNAME[0]}" ${LINENO})
        OutLogHead 1 "" "${g_sHeadCurLine}" "${g_sMsgCur}" "${flLog}" false
        return 1
    fi

    sTableOrigin=$(cat "${flTableOrigin}")

    local Module_Name JIRA_ID Designed_Requirement_ID Test_Case_ID Test_Item Test_Case_Title
    Module_Name=${sModule}
    while read sR0; do
        sR1=$(echo "${sR0}" |sed "s/^[ \t]\+//;s/[ \t\r]\+\$//")
        if [ -z "${sR1}" ]; then
            continue
        fi

        sStatus1=$(echo "${sR1}" |awk -F'\t' '{print $1}')
        sSearch1=$(echo "${sR1}" |awk -F'\t' '{print $2}')
        sSearch2=$(sed 's#\([]/*[]\)#\\\1#g' <<< "${sSearch1}")
        sMessage=$(echo "${sR1}" |awk -F'\t' '{print $3}')
        sTCLine1=$(grep -i "${sSearch2}" <<< "${sTableOrigin}" |sed "s/\r\+//g")
        if [ -n "${sTCLine1}" ]; then
            JIRA_ID=$(echo "${sTCLine1}" |awk -F'\t' '{print $1}')
            Designed_Requirement_ID=$(echo "${sTCLine1}" |awk -F'\t' '{print $2}')
            Test_Case_ID=$(echo "${sTCLine1}" |awk -F'\t' '{print $3}')
            Test_Item=$(echo "${sTCLine1}" |awk -F'\t' '{print $4}')
            Test_Case_Title=$(echo "${sTCLine1}" |awk -F'\t' '{print $5}')
            echo "${sStatus1}" |grep -q "^${sPass}\$"
            if [ $? -eq 0 ]; then
                writePass
            else
                echo "${sStatus1}" |grep -q "^${sFail}\$"
                if [ $? -eq 0 ]; then
                    writeFail "${sMessage}"
                fi
            fi
        fi
    done < "${flTableStatus}"
}
export -f GenReport

GenTable()
{
    local flTableOrigin=${1}
    local flTableStatus=${2}
    local flTableOutput=${3}
    local sModule=${4}
    local flLog=${5:-/dev/null}

    local sPass sFail sStatus1 sSearch1 sSearch2 sMessage 
    sPass=$(echo "${g_statusPass}" |sed 's#\([]/*[]\)#\\\1#g')
    sFail=$(echo "${g_statusFail}" |sed 's#\([]/*[]\)#\\\1#g')

    if [ ! -f "${flTableStatus}" ]; then
        g_sMsgCur="${flTableStatus} not exist"
        g_sHeadCurLine=$(printf "%s[%3d]%s[%3d]" "${FUNCNAME[1]}" "${BASH_LINENO[0]}" "${FUNCNAME[0]}" ${LINENO})
        OutLogHead 1 "" "${g_sHeadCurLine}" "${g_sMsgCur}" "${flLog}" false
        return 1
    fi

    local sTCsTable
    sTCsTable=$(cat "${flTableOrigin}")${g__n}

    while read sR0; do
        sR1=$(echo "${sR0}" |sed "s/^[ \t]\+//;s/[ \t\r]\+\$//")
        if [ -z "${sR1}" ]; then
            continue
        fi

        sStatus1=$(echo "${sR1}" |awk -F'\t' '{print $1}')
        sSearch1=$(echo "${sR1}" |awk -F'\t' '{print $2}')
        sSearch2=$(sed 's#\([]/*[]\)#\\\1#g' <<< "${sSearch1}")
        sTCLine1=$(grep -i "${sSearch2}" "${flTableOrigin}" |sed "s/\r\+//g")
        if [ -n "${sTCLine1}" ]; then
            sTCsTable=$(echo "${sTCsTable}" |sed "/${sSearch2}/s/^/${sStatus1}${g_sSplit}/")
        else
            sStatus1=${g_statusNone}
            sTCsTable=$(echo "${sTCsTable}" |sed "\${a ${sStatus1}${g_sSplit}${sSearch1}${g__n}q};")
        fi
    done < "${flTableStatus}"

    echo "${sTCsTable}" > "${flTableOutput}"
}
export -f GenTable

####################################################################################

